diff --git a/c++/cpp2py/converters/tuple.hpp b/c++/cpp2py/converters/tuple.hpp
index 8ca4f94..de26d55 100644
--- a/c++/cpp2py/converters/tuple.hpp
+++ b/c++/cpp2py/converters/tuple.hpp
@@ -32,7 +32,7 @@ namespace cpp2py {
     using tuple_t = std::tuple<Types...>;
 
     // c2py implementation
-    template <typename T, auto... Is> static PyObject *c2py_impl(T &&t, std::index_sequence<Is...>) {
+    template <typename T, std::size_t... Is> static PyObject *c2py_impl(T &&t, std::index_sequence<Is...>) {
       auto objs        = std::array<pyref, sizeof...(Is)>{convert_to_python(std::get<Is>(std::forward<T>(t)))...};
       bool one_is_null = std::any_of(std::begin(objs), std::end(objs), [](PyObject *a) { return a == NULL; });
       if (one_is_null) return NULL;
@@ -49,7 +49,7 @@ namespace cpp2py {
 
     private:
     // is_convertible implementation
-    template <auto... Is> static bool is_convertible_impl(PyObject *seq, bool raise_exception, std::index_sequence<Is...>) {
+    template <std::size_t... Is> static bool is_convertible_impl(PyObject *seq, bool raise_exception, std::index_sequence<Is...>) {
       return (py_converter<std::decay_t<Types>>::is_convertible(PySequence_Fast_GET_ITEM(seq, Is), raise_exception) and ...);
     }
 
@@ -71,7 +71,7 @@ namespace cpp2py {
     // -----------------------------------------
 
     private:
-    template <auto... Is> static auto py2c_impl(PyObject *seq, std::index_sequence<Is...>) {
+    template <std::size_t... Is> static auto py2c_impl(PyObject *seq, std::index_sequence<Is...>) {
       return std::make_tuple(py_converter<std::decay_t<Types>>::py2c(PySequence_Fast_GET_ITEM(seq, Is))...);
     }
 
