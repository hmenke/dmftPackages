From 2cfcc8abb239a13d69a3f38ea91c354652d9973e Mon Sep 17 00:00:00 2001
From: Henri Menke <henri@henrimenke.de>
Date: Tue, 10 Nov 2020 15:11:31 +0100
Subject: [PATCH 2/3] pytriqs -> triqs

$ git grep -l 'pytriqs' | xargs -I "{}" sed -i 's/pytriqs/triqs/g' "{}"
---
 Readme.md                                     |  2 +-
 benchmark/hubbard_atom_two_bathsites/calc.py  | 10 +++++-----
 benchmark/hubbard_atom_two_bathsites/plot.py  |  6 +++---
 .../Non-interacting dimer tutorial.ipynb      |  6 +++---
 benchmark/spinless/calc.py                    | 10 +++++-----
 benchmark/spinless/plot.py                    |  6 +++---
 doc/Documentation.ipynb                       | 20 +++++++++----------
 pyed/CubeTetras.py                            |  8 ++++----
 pyed/OperatorUtils.py                         |  2 +-
 pyed/ParameterCollection.py                   |  4 ++--
 pyed/SquareTriangles.py                       |  4 ++--
 pyed/TriqsExactDiagonalization.py             |  6 +++---
 pyed/tests/test_G_tau_and_G_iw.py             | 14 ++++++-------
 pyed/tests/test_operator_utils.py             |  6 +++---
 pyed/tests/test_sparse_matrix_fockstates.py   |  2 +-
 .../test_two_particle_greens_function.py      |  6 +++---
 pyed/tests/transform_kanamori.py              |  4 ++--
 17 files changed, 58 insertions(+), 58 deletions(-)

diff --git a/Readme.md b/Readme.md
index 374b23b..3334409 100644
--- a/Readme.md
+++ b/Readme.md
@@ -4,7 +4,7 @@ Copyright (C) 2017, H. U.R. Strand
 
 The python module `pyed` implements exact diagonalization for finite fermionic many-body quantum systems, together with calculations of several response functions in imagianary time.
 
-The many-body system is defined using `pytriqs` second-quantized operators and the response functions are stored in `pytriqs` Green's function containters.
+The many-body system is defined using `triqs` second-quantized operators and the response functions are stored in `triqs` Green's function containters.
 
 The original purpose of `pyed` is to provide exact solutions to small finite systems, to be used as benchmarks and tests for stochastic many-body solvers.
 
diff --git a/benchmark/hubbard_atom_two_bathsites/calc.py b/benchmark/hubbard_atom_two_bathsites/calc.py
index b88a657..d053177 100644
--- a/benchmark/hubbard_atom_two_bathsites/calc.py
+++ b/benchmark/hubbard_atom_two_bathsites/calc.py
@@ -11,12 +11,12 @@ import numpy as np
 
 # ----------------------------------------------------------------------
 
-from pytriqs.gf import Gf
-from pytriqs.gf import MeshImTime, MeshProduct
-from pytriqs.gf import GfImTime, GfImFreq
+from triqs.gf import Gf
+from triqs.gf import MeshImTime, MeshProduct
+from triqs.gf import GfImTime, GfImFreq
 
-from pytriqs.operators import c, c_dag
-from pytriqs.archive import HDFArchive
+from triqs.operators import c, c_dag
+from triqs.archive import HDFArchive
 
 # ----------------------------------------------------------------------
 
diff --git a/benchmark/hubbard_atom_two_bathsites/plot.py b/benchmark/hubbard_atom_two_bathsites/plot.py
index 0b75e60..abae6e8 100644
--- a/benchmark/hubbard_atom_two_bathsites/plot.py
+++ b/benchmark/hubbard_atom_two_bathsites/plot.py
@@ -10,9 +10,9 @@ import matplotlib.pyplot as plt
 
 # ----------------------------------------------------------------------
 
-from pytriqs.gf import Gf
-from pytriqs.archive import HDFArchive
-#from pytriqs.plot.mpl_interface import oplot
+from triqs.gf import Gf
+from triqs.archive import HDFArchive
+#from triqs.plot.mpl_interface import oplot
 
 # ----------------------------------------------------------------------
 
diff --git a/benchmark/non_interacting_dimer/Non-interacting dimer tutorial.ipynb b/benchmark/non_interacting_dimer/Non-interacting dimer tutorial.ipynb
index 0b6512a..18f4c91 100644
--- a/benchmark/non_interacting_dimer/Non-interacting dimer tutorial.ipynb	
+++ b/benchmark/non_interacting_dimer/Non-interacting dimer tutorial.ipynb	
@@ -33,7 +33,7 @@
     }
    ],
    "source": [
-    "from pytriqs.operators import c, c_dag\n",
+    "from triqs.operators import c, c_dag\n",
     "up, do = 0, 1\n",
     "\n",
     "V = 1.0\n",
@@ -100,9 +100,9 @@
    ],
    "source": [
     "import itertools\n",
-    "from pytriqs.gf import GfImTime\n",
+    "from triqs.gf import GfImTime\n",
     "import matplotlib.pyplot as plt\n",
-    "from pytriqs.plot.mpl_interface import oplot\n",
+    "from triqs.plot.mpl_interface import oplot\n",
     "\n",
     "plt.figure(figsize=(8, 6))\n",
     "subp = [2, 2, 1]\n",
diff --git a/benchmark/spinless/calc.py b/benchmark/spinless/calc.py
index de4d85e..d036e77 100644
--- a/benchmark/spinless/calc.py
+++ b/benchmark/spinless/calc.py
@@ -14,12 +14,12 @@ import numpy as np
 
 # ----------------------------------------------------------------------
 
-from pytriqs.gf import Gf
-from pytriqs.gf import MeshImTime, MeshProduct
-from pytriqs.gf import GfImTime, GfImFreq
+from triqs.gf import Gf
+from triqs.gf import MeshImTime, MeshProduct
+from triqs.gf import GfImTime, GfImFreq
 
-from pytriqs.operators import c, c_dag
-from pytriqs.archive import HDFArchive
+from triqs.operators import c, c_dag
+from triqs.archive import HDFArchive
 
 # ----------------------------------------------------------------------
 
diff --git a/benchmark/spinless/plot.py b/benchmark/spinless/plot.py
index efdaf9a..7555e32 100644
--- a/benchmark/spinless/plot.py
+++ b/benchmark/spinless/plot.py
@@ -9,9 +9,9 @@ import matplotlib.pyplot as plt
 
 # ----------------------------------------------------------------------
 
-from pytriqs.gf import Gf
-from pytriqs.archive import HDFArchive
-from pytriqs.plot.mpl_interface import oplotr
+from triqs.gf import Gf
+from triqs.archive import HDFArchive
+from triqs.plot.mpl_interface import oplotr
 
 # ----------------------------------------------------------------------
 if __name__ == '__main__':
diff --git a/doc/Documentation.ipynb b/doc/Documentation.ipynb
index ce48335..9e68c71 100644
--- a/doc/Documentation.ipynb
+++ b/doc/Documentation.ipynb
@@ -10,7 +10,7 @@
     "\n",
     "The python module `pyed` implements exact diagonalization for finite fermionic many-body quantum systems, together with calculations of several response functions in imagianary time.\n",
     "\n",
-    "The many-body system is defined using `pytriqs` second-quantized operators and the response functions are stored in `pytriqs` Green's function containters.\n",
+    "The many-body system is defined using `triqs` second-quantized operators and the response functions are stored in `triqs` Green's function containters.\n",
     "\n",
     "## Hamiltonians\n",
     "\n",
@@ -31,7 +31,7 @@
     }
    ],
    "source": [
-    "from pytriqs.operators import c, c_dag\n",
+    "from triqs.operators import c, c_dag\n",
     "up, down = 0, 1\n",
     "n_up = c_dag(up, 0) * c(up, 0)\n",
     "n_down = c_dag(down, 0) * c(down, 0)\n",
@@ -147,7 +147,7 @@
     "$$\n",
     "where the imaginary time dependent operators are defined in the Heisenberg picture $c_{\\sigma}(\\tau) \\equiv e^{\\tau H} c_{\\sigma} e^{-\\tau H}$ and $c^\\dagger_{\\sigma}(\\tau) \\equiv e^{\\tau H} c^\\dagger_{\\sigma} e^{-\\tau H}$.\n",
     "\n",
-    "To calculate $G(\\tau)$ we first create `pytriqs.GfImTime` instance to store the result and pass it to our ED solver instance:"
+    "To calculate $G(\\tau)$ we first create `triqs.GfImTime` instance to store the result and pass it to our ED solver instance:"
    ]
   },
   {
@@ -158,12 +158,12 @@
    },
    "outputs": [],
    "source": [
-    "from pytriqs.gf import GfImTime\n",
+    "from triqs.gf import GfImTime\n",
     "g_tau = GfImTime(name=r'$g$', beta=beta, statistic='Fermion', n_points=50, target_shape=(1,1))    \n",
     "ed.set_g2_tau(g_tau, c(up,0), c_dag(up,0))\n",
     "\n",
     "import matplotlib.pyplot as plt\n",
-    "from pytriqs.plot.mpl_interface import oplot\n",
+    "from triqs.plot.mpl_interface import oplot\n",
     "\n",
     "plt.figure(); oplot(g_tau); plt.savefig('figure_g_tau.png')"
    ]
@@ -191,7 +191,7 @@
    },
    "outputs": [],
    "source": [
-    "from pytriqs.gf import GfImTime\n",
+    "from triqs.gf import GfImTime\n",
     "densdens_tau = GfImTime(name=r'$\\langle n(\\tau) n(0) \\rangle$', beta=beta, statistic='Boson', n_points=50, target_shape=(1,1))    \n",
     "ed.set_g2_tau(densdens_tau, n_up, n_down)\n",
     "\n",
@@ -227,7 +227,7 @@
    },
    "outputs": [],
    "source": [
-    "from pytriqs.gf import GfImFreq\n",
+    "from triqs.gf import GfImFreq\n",
     "g_iwn = GfImFreq(name=r'$g$', beta=beta, statistic='Fermion', n_points=10, target_shape=(1,1))\n",
     "ed.set_g2_iwn(g_iwn, c(up,0), c_dag(up,0))\n",
     "\n",
@@ -258,7 +258,7 @@
     "c_\\gamma(\\tau_3) c^\\dagger_{\\bar{\\delta}} (0)  \\rangle\n",
     "$$\n",
     "\n",
-    "That easily can be calculated with `pyed` by passing a suitable `pytriqs` container to the ED solver:\n"
+    "That easily can be calculated with `pyed` by passing a suitable `triqs` container to the ED solver:\n"
    ]
   },
   {
@@ -267,8 +267,8 @@
    "metadata": {},
    "outputs": [],
    "source": [
-    "from pytriqs.gf import Gf\n",
-    "from pytriqs.gf import MeshImTime, MeshProduct\n",
+    "from triqs.gf import Gf\n",
+    "from triqs.gf import MeshImTime, MeshProduct\n",
     "\n",
     "ntau = 10\n",
     "imtime = MeshImTime(beta, 'Fermion', ntau)\n",
diff --git a/pyed/CubeTetras.py b/pyed/CubeTetras.py
index ab7cb0c..446c1c0 100644
--- a/pyed/CubeTetras.py
+++ b/pyed/CubeTetras.py
@@ -13,13 +13,13 @@ import numpy as np
 
 # ----------------------------------------------------------------------
 def Idxs(integer_index_list):
-    from pytriqs.gf import Idx
+    from triqs.gf import Idx
     return tuple( Idx(i) for i in integer_index_list )
 
 # ----------------------------------------------------------------------
 def zero_outer_planes_and_equal_times(g4_tau):
 
-    from pytriqs.gf import Idx
+    from triqs.gf import Idx
     beta = g4_tau.mesh.components[0].beta
     
     for idxs, (t1, t2, t3) in enumerate_tau3(g4_tau):
@@ -32,7 +32,7 @@ def zero_outer_planes_and_equal_times(g4_tau):
 # ----------------------------------------------------------------------
 def enumerate_tau3(g4_tau, make_real=True, beta=None):
 
-    from pytriqs.gf import MeshImTime, MeshProduct
+    from triqs.gf import MeshImTime, MeshProduct
     
     assert( type(g4_tau.mesh) == MeshProduct )
 
@@ -120,7 +120,7 @@ class CubeTetrasMesh(CubeTetrasBase):
     # ------------------------------------------------------------------
     def __iter__(self):
 
-        """ for pytriqs three time greens functions """
+        """ for triqs three time greens functions """
 
         tetra_idx = [ [] for n in xrange(6) ]
         tetra_tau = [ [] for n in xrange(6) ]
diff --git a/pyed/OperatorUtils.py b/pyed/OperatorUtils.py
index be68308..75c66ff 100644
--- a/pyed/OperatorUtils.py
+++ b/pyed/OperatorUtils.py
@@ -9,7 +9,7 @@ Author: Hugo U.R. Strand (2018) hugo.strand@gmail.com """
 import itertools
 import numpy as np
 
-from pytriqs.operators import c, c_dag, Operator, dagger
+from triqs.operators import c, c_dag, Operator, dagger
 
 # ----------------------------------------------------------------------    
 def fundamental_operators_from_gf_struct(gf_struct):
diff --git a/pyed/ParameterCollection.py b/pyed/ParameterCollection.py
index 52a7090..491a9bc 100644
--- a/pyed/ParameterCollection.py
+++ b/pyed/ParameterCollection.py
@@ -51,7 +51,7 @@ class ParameterCollection(object):
                 self.dict()[key] = bool(value)
 
     def convert_keys_from_string_to_python(self, dict_key):
-        """ pytriqs.archive.HDFArchive incorrectly mangles tuple keys to string
+        """ triqs.archive.HDFArchive incorrectly mangles tuple keys to string
         running this on the affected dict tries to revert this by running eval
         on the string representation. UGLY FIX... """
 
@@ -107,5 +107,5 @@ class ParameterCollection(object):
 
 # -- Register ParameterCollection in Triqs hdf_archive_schemes
 
-from pytriqs.archive.hdf_archive_schemes import register_class 
+from triqs.archive.hdf_archive_schemes import register_class 
 register_class(ParameterCollection)
diff --git a/pyed/SquareTriangles.py b/pyed/SquareTriangles.py
index b8f3b97..bfe48fc 100644
--- a/pyed/SquareTriangles.py
+++ b/pyed/SquareTriangles.py
@@ -25,7 +25,7 @@ def zero_outer_planes_and_equal_times(g3_tau):
 # ----------------------------------------------------------------------
 def enumerate_tau2(g3_tau, make_real=True, beta=None):
 
-    from pytriqs.gf import MeshImTime, MeshProduct
+    from triqs.gf import MeshImTime, MeshProduct
     
     assert( type(g3_tau.mesh) == MeshProduct )
 
@@ -110,7 +110,7 @@ class SquareTrianglesMesh(SquareTrianglesBase):
     # ------------------------------------------------------------------
     def __iter__(self):
 
-        """ for pytriqs three time greens functions """
+        """ for triqs three time greens functions """
 
         triangle_idx = [ [] for n in xrange(self.N) ]
         triangle_tau = [ [] for n in xrange(self.N) ]
diff --git a/pyed/TriqsExactDiagonalization.py b/pyed/TriqsExactDiagonalization.py
index 7dfc73a..65088bf 100644
--- a/pyed/TriqsExactDiagonalization.py
+++ b/pyed/TriqsExactDiagonalization.py
@@ -12,9 +12,9 @@ import numpy as np
 
 # ----------------------------------------------------------------------
 
-from pytriqs.gf import MeshImTime, MeshProduct, Idx
-from pytriqs.operators import dagger
-from pytriqs.utility import mpi
+from triqs.gf import MeshImTime, MeshProduct, Idx
+from triqs.operators import dagger
+from triqs.utility import mpi
 
 # ----------------------------------------------------------------------
 
diff --git a/pyed/tests/test_G_tau_and_G_iw.py b/pyed/tests/test_G_tau_and_G_iw.py
index 10e4cad..b434ab0 100644
--- a/pyed/tests/test_G_tau_and_G_iw.py
+++ b/pyed/tests/test_G_tau_and_G_iw.py
@@ -11,13 +11,13 @@ import numpy as np
 
 # ----------------------------------------------------------------------
 
-from pytriqs.gf import Gf
-from pytriqs.gf import MeshImTime, MeshImFreq
+from triqs.gf import Gf
+from triqs.gf import MeshImTime, MeshImFreq
 
-from pytriqs.gf import GfImTime, GfImFreq
-from pytriqs.operators import c, c_dag
+from triqs.gf import GfImTime, GfImFreq
+from triqs.operators import c, c_dag
 
-from pytriqs.gf import inverse, iOmega_n, InverseFourier
+from triqs.gf import inverse, iOmega_n, InverseFourier
 
 # ----------------------------------------------------------------------
 
@@ -56,7 +56,7 @@ def test_cf_G_tau_and_G_iw_nonint(verbose=False):
     # ------------------------------------------------------------------
     # -- Compare gfs
 
-    from pytriqs.utility.comparison_tests import assert_gfs_are_close
+    from triqs.utility.comparison_tests import assert_gfs_are_close
     
     assert_gfs_are_close(G_tau, G_tau_ed)
     assert_gfs_are_close(G_iw, G_iw_ed)
@@ -65,7 +65,7 @@ def test_cf_G_tau_and_G_iw_nonint(verbose=False):
     # -- Plotting
     
     if verbose:
-        from pytriqs.plot.mpl_interface import oplot, plt
+        from triqs.plot.mpl_interface import oplot, plt
         subp = [3, 1, 1]
         plt.subplot(*subp); subp[-1] += 1
         oplot(G_tau.real)
diff --git a/pyed/tests/test_operator_utils.py b/pyed/tests/test_operator_utils.py
index fd5ba1a..c1cedd1 100644
--- a/pyed/tests/test_operator_utils.py
+++ b/pyed/tests/test_operator_utils.py
@@ -11,10 +11,10 @@ import numpy as np
 
 # ----------------------------------------------------------------------
 
-from pytriqs.operators import n, c, c_dag, Operator, dagger
+from triqs.operators import n, c, c_dag, Operator, dagger
 
-from pytriqs.operators.util.U_matrix import U_matrix_kanamori, U_matrix
-from pytriqs.operators.util.hamiltonians import h_int_kanamori
+from triqs.operators.util.U_matrix import U_matrix_kanamori, U_matrix
+from triqs.operators.util.hamiltonians import h_int_kanamori
 
 from transform_kanamori import h_int_kanamori_transformed
 
diff --git a/pyed/tests/test_sparse_matrix_fockstates.py b/pyed/tests/test_sparse_matrix_fockstates.py
index 9f1144f..ebe5be1 100644
--- a/pyed/tests/test_sparse_matrix_fockstates.py
+++ b/pyed/tests/test_sparse_matrix_fockstates.py
@@ -12,7 +12,7 @@ import numpy as np
 
 # ----------------------------------------------------------------------
 
-from pytriqs.operators import c, c_dag
+from triqs.operators import c, c_dag
 
 # ----------------------------------------------------------------------
 
diff --git a/pyed/tests/test_two_particle_greens_function.py b/pyed/tests/test_two_particle_greens_function.py
index 32deb5d..d7c5eb5 100644
--- a/pyed/tests/test_two_particle_greens_function.py
+++ b/pyed/tests/test_two_particle_greens_function.py
@@ -12,10 +12,10 @@ import numpy as np
 
 #----------------------------------------------------------------------
 
-from pytriqs.gf import Gf, GfImTime
-from pytriqs.gf import MeshImTime, MeshProduct
+from triqs.gf import Gf, GfImTime
+from triqs.gf import MeshImTime, MeshProduct
 
-from pytriqs.operators import c, c_dag
+from triqs.operators import c, c_dag
 
 #----------------------------------------------------------------------
 
diff --git a/pyed/tests/transform_kanamori.py b/pyed/tests/transform_kanamori.py
index 17a7b69..f95d481 100644
--- a/pyed/tests/transform_kanamori.py
+++ b/pyed/tests/transform_kanamori.py
@@ -9,8 +9,8 @@ Author: Gernot J. Kraberger (2016) """
 import numpy as np
 from itertools import product
 
-from pytriqs.operators.util import get_mkind
-from pytriqs.operators import c, c_dag, Operator, dagger
+from triqs.operators.util import get_mkind
+from triqs.operators import c, c_dag, Operator, dagger
 
 # ----------------------------------------------------------------------
 def h_int_kanamori_d(spin_names, orb_names, U, Uprime, J_hund,
-- 
2.28.0

